version: '3'

services:
  # Сервис PostgresSQL
  postgres:
    container_name: "postgres"
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME}
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    env_file:
      - .env
    ports:
      - "5432:5432"
    networks:
      - custom

  redis:
    image: redis
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - custom
    expose:
      - 6379


  #Сервис FastAPI
  fastapi_example:
    container_name: "fastapi_example"
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
#    command: bash -c "alembic upgrade heads && app.main:app --host 0.0.0.0 --port 8000 --reload"
    command: [ "/app_example/docker/app.sh" ]
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    ports:
      - "8000:8000"
    networks:
      - custom

  # worker
  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0  # Обновлено
#    command: celery -A app.config.task_worker:celery_app worker --loglevel=INFO
    command: [ "/app_example/docker/celery.sh", "celery" ]
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - custom


  flower:
    build:
      context: . # celery это библиотека, у неё нет образа, берём из основного билда
      dockerfile: Dockerfile
    container_name: flower
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0  # Обновлено
#    command: celery -A app.config.task_worker:celery_app flower
    command: [ "/app_example/docker/celery.sh", "flower" ]
    env_file:
      - .env
    depends_on:
      - redis
      - celery
    ports:
      - "5555:5555"
    networks:
      - custom

  prometheus:
    depends_on:
      - fastapi_example
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - custom

  grafana:
    image: grafana/grafana:8.5.22
    container_name: grafana
    restart: always
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - custom



volumes:
  postgres_storage:
  grafana-data:
  grafana-config:
  prometheus-data:



networks:
  custom: